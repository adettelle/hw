// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: event_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Storager_AddEventByID_FullMethodName            = "/Storager/AddEventByID"
	Storager_UpdateEventByID_FullMethodName         = "/Storager/UpdateEventByID"
	Storager_DeleteEventByID_FullMethodName         = "/Storager/DeleteEventByID"
	Storager_GetEventListingByUserID_FullMethodName = "/Storager/GetEventListingByUserID"
	Storager_GetEventByID_FullMethodName            = "/Storager/GetEventByID"
	Storager_Notify_FullMethodName                  = "/Storager/Notify"
)

// StoragerClient is the client API for Storager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoragerClient interface {
	AddEventByID(ctx context.Context, in *AddEventByIDRequest, opts ...grpc.CallOption) (*AddEventByIDResponse, error)
	UpdateEventByID(ctx context.Context, in *UpdateEventByIDRequest, opts ...grpc.CallOption) (*UpdateEventByIDResponse, error)
	DeleteEventByID(ctx context.Context, in *DeleteEventByIDRequest, opts ...grpc.CallOption) (*DeleteEventByIDResponse, error)
	GetEventListingByUserID(ctx context.Context, in *GetEventListingByUserIDRequest, opts ...grpc.CallOption) (*GetEventListingByUserIDResponse, error)
	GetEventByID(ctx context.Context, in *GetEventByIDRequest, opts ...grpc.CallOption) (*GetEventByIDResponse, error)
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
}

type storagerClient struct {
	cc grpc.ClientConnInterface
}

func NewStoragerClient(cc grpc.ClientConnInterface) StoragerClient {
	return &storagerClient{cc}
}

func (c *storagerClient) AddEventByID(ctx context.Context, in *AddEventByIDRequest, opts ...grpc.CallOption) (*AddEventByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddEventByIDResponse)
	err := c.cc.Invoke(ctx, Storager_AddEventByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagerClient) UpdateEventByID(ctx context.Context, in *UpdateEventByIDRequest, opts ...grpc.CallOption) (*UpdateEventByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEventByIDResponse)
	err := c.cc.Invoke(ctx, Storager_UpdateEventByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagerClient) DeleteEventByID(ctx context.Context, in *DeleteEventByIDRequest, opts ...grpc.CallOption) (*DeleteEventByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEventByIDResponse)
	err := c.cc.Invoke(ctx, Storager_DeleteEventByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagerClient) GetEventListingByUserID(ctx context.Context, in *GetEventListingByUserIDRequest, opts ...grpc.CallOption) (*GetEventListingByUserIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventListingByUserIDResponse)
	err := c.cc.Invoke(ctx, Storager_GetEventListingByUserID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagerClient) GetEventByID(ctx context.Context, in *GetEventByIDRequest, opts ...grpc.CallOption) (*GetEventByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventByIDResponse)
	err := c.cc.Invoke(ctx, Storager_GetEventByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storagerClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, Storager_Notify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoragerServer is the server API for Storager service.
// All implementations must embed UnimplementedStoragerServer
// for forward compatibility.
type StoragerServer interface {
	AddEventByID(context.Context, *AddEventByIDRequest) (*AddEventByIDResponse, error)
	UpdateEventByID(context.Context, *UpdateEventByIDRequest) (*UpdateEventByIDResponse, error)
	DeleteEventByID(context.Context, *DeleteEventByIDRequest) (*DeleteEventByIDResponse, error)
	GetEventListingByUserID(context.Context, *GetEventListingByUserIDRequest) (*GetEventListingByUserIDResponse, error)
	GetEventByID(context.Context, *GetEventByIDRequest) (*GetEventByIDResponse, error)
	Notify(context.Context, *NotifyRequest) (*NotifyResponse, error)
	mustEmbedUnimplementedStoragerServer()
}

// UnimplementedStoragerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStoragerServer struct{}

func (UnimplementedStoragerServer) AddEventByID(context.Context, *AddEventByIDRequest) (*AddEventByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEventByID not implemented")
}
func (UnimplementedStoragerServer) UpdateEventByID(context.Context, *UpdateEventByIDRequest) (*UpdateEventByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventByID not implemented")
}
func (UnimplementedStoragerServer) DeleteEventByID(context.Context, *DeleteEventByIDRequest) (*DeleteEventByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventByID not implemented")
}
func (UnimplementedStoragerServer) GetEventListingByUserID(context.Context, *GetEventListingByUserIDRequest) (*GetEventListingByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventListingByUserID not implemented")
}
func (UnimplementedStoragerServer) GetEventByID(context.Context, *GetEventByIDRequest) (*GetEventByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventByID not implemented")
}
func (UnimplementedStoragerServer) Notify(context.Context, *NotifyRequest) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedStoragerServer) mustEmbedUnimplementedStoragerServer() {}
func (UnimplementedStoragerServer) testEmbeddedByValue()                  {}

// UnsafeStoragerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoragerServer will
// result in compilation errors.
type UnsafeStoragerServer interface {
	mustEmbedUnimplementedStoragerServer()
}

func RegisterStoragerServer(s grpc.ServiceRegistrar, srv StoragerServer) {
	// If the following call pancis, it indicates UnimplementedStoragerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Storager_ServiceDesc, srv)
}

func _Storager_AddEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEventByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragerServer).AddEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storager_AddEventByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragerServer).AddEventByID(ctx, req.(*AddEventByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storager_UpdateEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragerServer).UpdateEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storager_UpdateEventByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragerServer).UpdateEventByID(ctx, req.(*UpdateEventByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storager_DeleteEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragerServer).DeleteEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storager_DeleteEventByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragerServer).DeleteEventByID(ctx, req.(*DeleteEventByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storager_GetEventListingByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventListingByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragerServer).GetEventListingByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storager_GetEventListingByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragerServer).GetEventListingByUserID(ctx, req.(*GetEventListingByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storager_GetEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragerServer).GetEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storager_GetEventByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragerServer).GetEventByID(ctx, req.(*GetEventByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storager_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoragerServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storager_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoragerServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Storager_ServiceDesc is the grpc.ServiceDesc for Storager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Storager",
	HandlerType: (*StoragerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEventByID",
			Handler:    _Storager_AddEventByID_Handler,
		},
		{
			MethodName: "UpdateEventByID",
			Handler:    _Storager_UpdateEventByID_Handler,
		},
		{
			MethodName: "DeleteEventByID",
			Handler:    _Storager_DeleteEventByID_Handler,
		},
		{
			MethodName: "GetEventListingByUserID",
			Handler:    _Storager_GetEventListingByUserID_Handler,
		},
		{
			MethodName: "GetEventByID",
			Handler:    _Storager_GetEventByID_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Storager_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event_service.proto",
}
