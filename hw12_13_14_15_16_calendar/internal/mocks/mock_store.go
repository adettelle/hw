// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/adettelle/hw/hw12_13_14_15_calendar/internal/app (interfaces: Storager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	storage "github.com/adettelle/hw/hw12_13_14_15_calendar/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// AddEventByID mocks base method.
func (m *MockStorager) AddEventByID(arg0 context.Context, arg1 storage.EventCreateDTO, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEventByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEventByID indicates an expected call of AddEventByID.
func (mr *MockStoragerMockRecorder) AddEventByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEventByID", reflect.TypeOf((*MockStorager)(nil).AddEventByID), arg0, arg1, arg2)
}

// DeleteEventByID mocks base method.
func (m *MockStorager) DeleteEventByID(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEventByID indicates an expected call of DeleteEventByID.
func (mr *MockStoragerMockRecorder) DeleteEventByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventByID", reflect.TypeOf((*MockStorager)(nil).DeleteEventByID), arg0, arg1)
}

// GetEventByID mocks base method.
func (m *MockStorager) GetEventByID(arg0, arg1 string) (storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", arg0, arg1)
	ret0, _ := ret[0].(storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockStoragerMockRecorder) GetEventByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockStorager)(nil).GetEventByID), arg0, arg1)
}

// GetEventListingByUserID mocks base method.
func (m *MockStorager) GetEventListingByUserID(arg0 string, arg1 time.Time, arg2 string) ([]storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventListingByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventListingByUserID indicates an expected call of GetEventListingByUserID.
func (mr *MockStoragerMockRecorder) GetEventListingByUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventListingByUserID", reflect.TypeOf((*MockStorager)(nil).GetEventListingByUserID), arg0, arg1, arg2)
}

// Notify mocks base method.
func (m *MockStorager) Notify(arg0 uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Notify indicates an expected call of Notify.
func (mr *MockStoragerMockRecorder) Notify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockStorager)(nil).Notify), arg0)
}

// UpdateEventByID mocks base method.
func (m *MockStorager) UpdateEventByID(arg0 context.Context, arg1 string, arg2 storage.EventUpdateDTO, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEventByID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEventByID indicates an expected call of UpdateEventByID.
func (mr *MockStoragerMockRecorder) UpdateEventByID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEventByID", reflect.TypeOf((*MockStorager)(nil).UpdateEventByID), arg0, arg1, arg2, arg3)
}
